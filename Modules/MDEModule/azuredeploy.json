{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Get-MDEInsights",
            "type": "String"
        },
        "MDEApiEndpoint": {
            "defaultValue": "api.securitycenter.microsoft.com",
            "type": "String"
        }
    },
    "variables": {
        "AzureSentinelConnectionName":"[concat('azuresentinel-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "accessControl": {
                    "triggers": {
                        "allowedCallerIpAddresses": []
                    }
                },
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "actions": {
                        "Compose_response": {
                            "runAfter": {
                                "Scope_Account": [
                                    "Succeeded"
                                ],
                                "Scope_Host": [
                                    "Succeeded"
                                ],
                                "Scope_IP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": {
                                "AnalyzedEntities": "@add(length(variables('DetailedResultsHosts')),add(length(variables('DetailedResultsIPs')),length(variables('DetailedResultsAccounts'))))",
                                "DetailedResults": {
                                    "Accounts": "@variables('DetailedResultsAccounts')",
                                    "Hosts": "@variables('DetailedResultsHosts')",
                                    "IPs": "@variables('DetailedResultsIPs')"
                                },
                                "HostsHighestExposureLevel": "@{if(contains(body('Create_table_to_check_HostsHighestExposureLevel'), 'High'), 'High', if(contains(body('Create_table_to_check_HostsHighestExposureLevel'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_HostsHighestExposureLevel'), 'Low'), 'Low', if(contains(body('Create_table_to_check_HostsHighestExposureLevel'), 'None'),'None','Unknown'))))}",
                                "HostsHighestRiskScore": "@{if(contains(body('Create_table_to_check_HostsHighestRiskScore'), 'High'), 'High', if(contains(body('Create_table_to_check_HostsHighestRiskScore'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_HostsHighestRiskScore'), 'Low'), 'Low', if(contains(body('Create_table_to_check_HostsHighestRiskScore'), 'Informational'), 'Informational', if(contains(body('Create_table_to_check_HostsHighestRiskScore'), 'None'), 'None', 'Unknown')))))}",
                                "IPsHighestExposureLevel": "@{if(contains(body('Create_table_to_check_IPsHighestExposureLevel'), 'High'), 'High', if(contains(body('Create_table_to_check_IPsHighestExposureLevel'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_IPsHighestExposureLevel'), 'Low'), 'Low', if(contains(body('Create_table_to_check_IPsHighestExposureLevel'), 'None'),'None','Unknown'))))}",
                                "IPsHighestRiskScore": "@{if(contains(body('Create_table_to_check_IPsHighestRiskScore'), 'High'), 'High', if(contains(body('Create_table_to_check_IPsHighestRiskScore'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_IPsHighestRiskScore'), 'Low'), 'Low', if(contains(body('Create_table_to_check_IPsHighestRiskScore'), 'Informational'), 'Informational', if(contains(body('Create_table_to_check_IPsHighestRiskScore'), 'None'), 'None', 'Unknown')))))}",
                                "ModuleName": "@{parameters('PlaybookInternalName')}",
                                "UsersHighestExposureLevel": "@{if(contains(body('Create_table_to_check_UsersHighestExposureLevel'), 'High'), 'High', if(contains(body('Create_table_to_check_UsersHighestExposureLevel'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_UsersHighestExposureLevel'), 'Low'), 'Low', if(contains(body('Create_table_to_check_UsersHighestExposureLevel'), 'None'),'None','Unknown'))))}",
                                "UsersHighestRiskScore": "@{if(contains(body('Create_table_to_check_UsersHighestRiskScore'), 'High'), 'High', if(contains(body('Create_table_to_check_UsersHighestRiskScore'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_UsersHighestRiskScore'), 'Low'), 'Low', if(contains(body('Create_table_to_check_UsersHighestRiskScore'), 'Informational'), 'Informational', if(contains(body('Create_table_to_check_UsersHighestRiskScore'), 'None'), 'None', 'Unknown')))))}"
                            }
                        },
                        "Condition_-_Add_comment": {
                            "actions": {
                                "Add_comment_to_incident_(V3)": {
                                    "runAfter": {
                                        "Create_HTML_table_for_Hosts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@body('Parse_JSON')?['IncidentARMId']",
                                            "message": "Lookback in days: @{triggerBody()?['LookbackInDays']}<br/><ul><li>Users Highest Risk Score: @{outputs('Compose_response')['UsersHighestRiskScore']}</li><li>Users Highest Exposure Level: @{outputs('Compose_response')['UsersHighestExposureLevel']}</li></ul>@{outputs('Compose_UserDevices_output')}<br/><ul><li>IP Highest Risk Score: @{outputs('Compose_response')['IPsHighestRiskScore']}</li><li>IP Highest Exposure Level: @{outputs('Compose_response')['IPsHighestExposureLevel']}</li></ul>@{outputs('Compose_IPDevices_output')}<br/><ul><li>Host Highest Risk Score: @{outputs('Compose_response')['HostsHighestRiskScore']}</li><li>Host Highest Exposure Level: @{outputs('Compose_response')['HostsHighestExposureLevel']}</li></ul>@{if(equals(length(variables('DetailedResultsHosts')), 0),'No hosts found',outputs('Create_HTML_table_for_Hosts')['body'])}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Compose_IPDevices_output": {
                                    "runAfter": {
                                        "For_each_DetailedResultsIPs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@variables('Comments')"
                                },
                                "Compose_UserDevices_output": {
                                    "runAfter": {
                                        "For_each_DetailedResultsAccounts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@replace(replace(replace(variables('Comments'), '&lt;', '<'), '&gt;', '>'), '&quot;', '\"')"
                                },
                                "Create_HTML_table_for_Hosts": {
                                    "runAfter": {
                                        "Compose_IPDevices_output": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "format": "HTML",
                                        "from": "@variables('DetailedResultsHosts')"
                                    }
                                },
                                "For_each_DetailedResultsAccounts": {
                                    "foreach": "@variables('DetailedResultsAccounts')",
                                    "actions": {
                                        "Append_to_string_variable_Comments": {
                                            "runAfter": {
                                                "Create_HTML_table_for_UserDevices": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Comments",
                                                "value": "@{if(not(equals(item()['UserPrincipalName'], '')), concat('<a href=\"https://security.microsoft.com/user/?aad=',item()['UserId'],'&tid=',body('Parse_JSON')?['TenantId'],'\" target=\"_blank\">',item()['UserPrincipalName'],'</a>'), item()['UserSid'])} @{if(equals(length(items('For_each_DetailedResultsAccounts')['UserDevices']),0),' - No devices found',body('Create_table_for_Machines')[0])} <br />"
                                            }
                                        },
                                        "Create_HTML_table_for_UserDevices": {
                                            "runAfter": {},
                                            "type": "Table",
                                            "inputs": {
                                                "format": "HTML",
                                                "from": "@items('For_each_DetailedResultsAccounts')['UserDevices']"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                        "concurrency": {
                                            "repetitions": 1
                                        }
                                    }
                                },
                                "For_each_DetailedResultsIPs": {
                                    "foreach": "@variables('DetailedResultsIPs')",
                                    "actions": {
                                        "Append_to_string_variable_Comments_again": {
                                            "runAfter": {
                                                "Create_HTML_table_for_IPDevices": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "Comments",
                                                "value": "@{items('For_each_DetailedResultsIPs')['Address']}@{if(equals(length(items('For_each_DetailedResultsIPs')['IPDevices']),0),' - No devices found',body('Create_HTML_table_for_IPDevices'))} <br />"
                                            }
                                        },
                                        "Create_HTML_table_for_IPDevices": {
                                            "runAfter": {},
                                            "type": "Table",
                                            "inputs": {
                                                "format": "HTML",
                                                "from": "@items('For_each_DetailedResultsIPs')['IPDevices']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Reset_variable_Comments": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                        "concurrency": {
                                            "repetitions": 1
                                        }
                                    }
                                },
                                "Reset_variable_Comments": {
                                    "runAfter": {
                                        "Compose_UserDevices_output": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "Comments",
                                        "value": "@{null}"
                                    }
                                }
                            },
                            "runAfter": {
                                "Compose_response": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['AddIncidentComments']",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_-_Terminate_if_no_supported_entities": {
                            "actions": {
                                "Response_-_Send_empty_results": {
                                    "runAfter": {},
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                        "body": {
                                            "AnalyzedEntities": 0,
                                            "DetailedResults": [],
                                            "HostsHighestExposureLevel": "Unknown",
                                            "HostsHighestRiskScore": "Unknown",
                                            "IPsHighestExposureLevel": "Unknown",
                                            "IPsHighestRiskScore": "Unknown",
                                            "ModuleName": "@{parameters('PlaybookInternalName')}",
                                            "UsersHighestExposureLevel": "Unknown",
                                            "UsersHighestRiskScore": "Unknown"
                                        },
                                        "statusCode": 200
                                    }
                                },
                                "Terminate": {
                                    "runAfter": {
                                        "Response_-_Send_empty_results": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_Comments": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('Parse_JSON')?['AccountsCount']",
                                            0
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@body('Parse_JSON')?['IPsCount']",
                                            0
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@body('Parse_JSON')?['HostsCount']",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_variable_Comments": {
                            "runAfter": {
                                "Initialize_variable_DetailedResultsHosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Comments",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_DetailedResultsAccounts": {
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "DetailedResultsAccounts",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_DetailedResultsHosts": {
                            "runAfter": {
                                "Initialize_variable_DetailedResultsIPs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "DetailedResultsHosts",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_DetailedResultsIPs": {
                            "runAfter": {
                                "Initialize_variable_DetailedResultsAccounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "DetailedResultsIPs",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {},
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['Entities']",
                                "schema": {
                                    "properties": {
                                        "Accounts": {
                                            "description": "Array of User Accounts",
                                            "items": {
                                                "properties": {
                                                    "AssignedRoles": {
                                                        "description": "Array of assigned roles in Accounts array",
                                                        "items": {
                                                            "properties": {
                                                                "Role": {
                                                                    "description": "Array property in AssignedRoles array"
                                                                }
                                                            },
                                                            "required": [],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Accounts array",
                                                        "properties": {
                                                            "accountName": {
                                                                "description": "accountName from RawEntity object in Accounts array"
                                                            },
                                                            "displayName": {
                                                                "description": "dislayName from RawEntity object in Accounts array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Accounts array"
                                                            },
                                                            "isDomainJoined": {
                                                                "description": "isDomainJoined from RawEntity object in Accounts array"
                                                            },
                                                            "sid": {
                                                                "description": "sid from RawEntity object in Accounts array"
                                                            },
                                                            "upnSuffix": {
                                                                "description": "upnSuffix from RawEntity object in Accounts array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "accountEnabled": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "city": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "country": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "department": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "id": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "jobTitle": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "mail": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "manager": {
                                                        "description": "Array property in Accounts array",
                                                        "properties": {
                                                            "@@odata.type": {
                                                                "description": "Array property in Accounts array manager object"
                                                            },
                                                            "id": {
                                                                "description": "Array property in Accounts array manager object"
                                                            },
                                                            "mail": {
                                                                "description": "Array property in Accounts array manager object"
                                                            },
                                                            "userPrincipalName": {
                                                                "description": "Array property in Accounts array manager object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "officeLocation": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesDistinguishedName": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesDomainName": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesSamAccountName": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesSecurityIdentifier": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "onPremisesSyncEnabled": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "state": {
                                                        "description": "Array property in Accounts array"
                                                    },
                                                    "userPrincipalName": {
                                                        "description": "Array property in Accounts array"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "AccountsCount": {
                                            "description": "Count of accounts processed by module",
                                            "type": "integer"
                                        },
                                        "Domains": {
                                            "description": "Array of Domains",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Domains array",
                                                        "properties": {
                                                            "domainName": {
                                                                "description": "domainName from RawEntity object in Domains array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Domains array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "DomainsCount": {
                                            "description": "Count of Domains processed by module",
                                            "type": "integer"
                                        },
                                        "EntitiesCount": {
                                            "description": "Count of all entities processed by enrichment module",
                                            "type": "integer"
                                        },
                                        "FileHashes": {
                                            "description": "Array of FileHashes",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in FileHashes array",
                                                        "properties": {
                                                            "algorithm": {
                                                                "description": "algorithm from RawEntity object in FileHashes array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in FileHashes array"
                                                            },
                                                            "hashValue": {
                                                                "description": "hashValue from RawEntity object in FileHashes array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "FileHashesCount": {
                                            "description": "Count of File Hashes processed by module",
                                            "type": "integer"
                                        },
                                        "Files": {
                                            "description": "Array of Files",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Files array",
                                                        "properties": {
                                                            "directory": {
                                                                "description": "directory from RawEntity object in Files array"
                                                            },
                                                            "fileName": {
                                                                "description": "fileName from RawEntity object in Files array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Files array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "FilesCount": {
                                            "description": "Count of Files processed by module",
                                            "type": "integer"
                                        },
                                        "Hosts": {
                                            "description": "Array of Hosts",
                                            "items": {
                                                "properties": {
                                                    "DnsDomain": {
                                                        "description": "Array property in Hosts array"
                                                    },
                                                    "FQDN": {
                                                        "description": "Array property in Hosts array"
                                                    },
                                                    "Hostname": {
                                                        "description": "Array property in Hosts array"
                                                    },
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in Hosts array",
                                                        "properties": {
                                                            "dnsDomain": {
                                                                "description": "dnsDomain from RawEntity object in Hosts array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in Hosts array"
                                                            },
                                                            "hostName": {
                                                                "description": "hostName from RawEntity object in Hosts array"
                                                            },
                                                            "netBiosName": {
                                                                "description": "netBiosName from RawEntity object in Hosts array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "HostsCount": {
                                            "description": "Count of Hosts processed by module",
                                            "type": "integer"
                                        },
                                        "IPs": {
                                            "description": "Array of IP Addresses",
                                            "items": {
                                                "properties": {
                                                    "Address": {
                                                        "description": "Array property in IPs array"
                                                    },
                                                    "GeoData": {
                                                        "description": "Array object in IPs array",
                                                        "properties": {
                                                            "asn": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "carrier": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "city": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "cityCf": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "continent": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "country": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "countryCf": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "ipAddr": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "ipRoutingType": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "latitude": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "longitude": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "organization": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "organizationType": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "region": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "state": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "stateCf": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            },
                                                            "stateCode": {
                                                                "description": "Array property in IPs array GeoData object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in IPs array",
                                                        "properties": {
                                                            "address": {
                                                                "description": "address from RawEntity object in IPs array"
                                                            },
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in IPs array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "IPsCount": {
                                            "description": "Count of IPs processed by module",
                                            "type": "integer"
                                        },
                                        "IncidentARMId": {
                                            "description": "The ARM Id of the Azure Sentinel Incident",
                                            "type": "string"
                                        },
                                        "ModuleVersions": {
                                            "properties": {
                                                "AADRisksModule": {
                                                    "type": "string"
                                                },
                                                "BaseModule": {
                                                    "type": "string"
                                                },
                                                "FileModule": {
                                                    "type": "string"
                                                },
                                                "KQLModule": {
                                                    "type": "string"
                                                },
                                                "MCASModule": {
                                                    "type": "string"
                                                },
                                                "MDEModule": {
                                                    "type": "string"
                                                },
                                                "OOFModule": {
                                                    "type": "string"
                                                },
                                                "RelatedAlerts": {
                                                    "type": "string"
                                                },
                                                "TIModule": {
                                                    "type": "string"
                                                },
                                                "UEBAModule": {
                                                    "type": "string"
                                                },
                                                "WatchlistModule": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "TenantDisplayName": {
                                            "description": "Azure AD Tenant Display Name",
                                            "type": "string"
                                        },
                                        "TenantId": {
                                            "description": "Azure AD Tenant Id",
                                            "type": "string"
                                        },
                                        "URLs": {
                                            "description": "Array of URLs",
                                            "items": {
                                                "properties": {
                                                    "RawEntity": {
                                                        "description": "Object containing Raw unenriched entity data in URLs array",
                                                        "properties": {
                                                            "friendlyName": {
                                                                "description": "friendlyName from RawEntity object in URLs array"
                                                            },
                                                            "url": {
                                                                "description": "url from RawEntity object in URLs array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "URLsCount": {
                                            "description": "Count of URLs processed by module",
                                            "type": "integer"
                                        },
                                        "WorkspaceId": {
                                            "description": "The Log Analytics Workspace Id of the Azure Sentinel Incident",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Response": {
                            "runAfter": {
                                "Condition_-_Add_comment": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": "@outputs('Compose_response')",
                                "statusCode": 200
                            }
                        },
                        "Response_error_Account": {
                            "runAfter": {
                                "Scope_Account": [
                                    "TimedOut",
                                    "Failed"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "Error": "@{parameters('PlaybookInternalName')} failed to execute with status @{result('For_each_account')[0]['outputs'][0]['outputs']['statusCode']}",
                                    "PlaybookName": "@{workflow()?['name']}",
                                    "PlaybookResourceId": "@{workflow()?['id']}",
                                    "PlaybookRunId": "@{workflow()?['run']?['name']}",
                                    "PlaybookVersion": "@parameters('PlaybookVersion')",
                                    "SourceError": "@result('For_each_account')[0]['outputs'][0]['outputs']['body']"
                                },
                                "statusCode": "@result('For_each_account')[0]['outputs'][0]['outputs']['statusCode']"
                            }
                        },
                        "Response_error_Host": {
                            "runAfter": {
                                "Scope_Host": [
                                    "TimedOut",
                                    "Failed"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "Error": "@{parameters('PlaybookInternalName')} failed to execute with status @{result('For_each_host')[0]['outputs'][0]['outputs']['statusCode']}",
                                    "PlaybookName": "@{workflow()?['name']}",
                                    "PlaybookResourceId": "@{workflow()?['id']}",
                                    "PlaybookRunId": "@{workflow()?['run']?['name']}",
                                    "PlaybookVersion": "@parameters('PlaybookVersion')",
                                    "SourceError": "@result('For_each_host')[0]['outputs'][0]['outputs']['body']"
                                },
                                "statusCode": "@result('For_each_host')[0]['outputs'][0]['outputs']['statusCode']"
                            }
                        },
                        "Response_error_IP": {
                            "runAfter": {
                                "Scope_IP": [
                                    "Failed",
                                    "TimedOut"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "Error": "@{parameters('PlaybookInternalName')} failed to execute with status @{result('For_each_IP_in_Results')[0]['outputs'][0]['outputs']['statusCode']}",
                                    "PlaybookName": "@{workflow()?['name']}",
                                    "PlaybookResourceId": "@{workflow()?['id']}",
                                    "PlaybookRunId": "@{workflow()?['run']?['name']}",
                                    "PlaybookVersion": "@parameters('PlaybookVersion')",
                                    "SourceError": "@result('For_each_IP_in_Results')[0]['outputs'][0]['outputs']['body']"
                                },
                                "statusCode": "@result('For_each_IP_in_Results')[0]['outputs'][0]['outputs']['statusCode']"
                            }
                        },
                        "Scope_Account": {
                            "actions": {
                                "Check_for_Accounts": {
                                    "actions": {
                                        "Compose_MDE_Account_Query": {
                                            "runAfter": {
                                                "Select_-_objectSid": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "let userData = todynamic(url_decode(\"@{encodeUriComponent(body('Select_-_objectSid'))}\"));\nlet users = print users = userData\n| mv-expand users\n| project objectSid = tostring(users.objectSid), id = tostring(users.id), userPrincipalName = tostring(users.userPrincipalName);\nDeviceLogonEvents \n| where Timestamp > ago(@{triggerBody()?['LookbackInDays']}d)\n| where LogonType in (\"Interactive\",\"RemoteInteractive\")\n| join kind=inner (users) on $left.AccountSid == $right.objectSid\n| summarize ListIds=make_set(DeviceId) by AccountSid, userPrincipalName, id"
                                        },
                                        "Filter_array_-_Get_only_account_with_a_onPremisesSecurityIdentifier_or_sid": {
                                            "runAfter": {},
                                            "type": "Query",
                                            "inputs": {
                                                "from": "@body('Parse_JSON')?['Accounts']",
                                                "where": "@greater(add(length(coalesce(item()?['onPremisesSecurityIdentifier'], '')), length(coalesce(item()?['RawEntity']?['sid'], ''))), 0)"
                                            }
                                        },
                                        "For_each_account": {
                                            "foreach": "@body('MDE_-_Get_Devices_by_SID')?['Results']",
                                            "actions": {
                                                "Append_to_array_DetailsResultsAccounts": {
                                                    "runAfter": {
                                                        "Create_table_for_Machines": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "DetailedResultsAccounts",
                                                        "value": {
                                                            "UserDevices": "@body('MDE_-_Get_Machines_by_Id')?['value']",
                                                            "UserHighestExposureLevel": "@{if(contains(body('Create_table_to_check_UserHighestExposureLevel'), 'High'), 'High', if(contains(body('Create_table_to_check_UserHighestExposureLevel'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_UserHighestExposureLevel'), 'Low'), 'Low', if(contains(body('Create_table_to_check_UserHighestExposureLevel'), 'None'), 'None', 'Unknown'))))}",
                                                            "UserHighestRiskScore": "@{if(contains(body('Create_table_to_check_UserHighestRiskScore'), 'High'), 'High', if(contains(body('Create_table_to_check_UserHighestRiskScore'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_UserHighestRiskScore'), 'Low'), 'Low', if(contains(body('Create_table_to_check_UserHighestRiskScore'), 'Informational'), 'Informational', if(contains(body('Create_table_to_check_UserHighestRiskScore'), 'None'), 'None', 'Unknown')))))}",
                                                            "UserId": "@{items('For_each_account')?['id']}",
                                                            "UserPrincipalName": "@{items('For_each_account')?['userPrincipalName']}",
                                                            "UserSid": "@{items('For_each_account')?['AccountSid']}"
                                                        }
                                                    }
                                                },
                                                "Compose_UserHighestScore": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": []
                                                },
                                                "Create_table_for_Machines": {
                                                    "runAfter": {
                                                        "Create_table_to_check_UserHighestExposureLevel": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Table",
                                                    "inputs": {
                                                        "columns": [
                                                            {
                                                                "header": "id",
                                                                "value": "<a href=\"https://security.microsoft.com/machines/@{item()?['id']}?tid=@{body('Parse_JSON')?['TenantId']}\" target=\"_blank\">@{item()?['id']}</a>"
                                                            },
                                                            {
                                                                "header": "computer",
                                                                "value": "@item()?['computerDnsName']"
                                                            },
                                                            {
                                                                "header": "riskScore",
                                                                "value": "@item()?['riskScore']"
                                                            },
                                                            {
                                                                "header": "exposureLevel",
                                                                "value": "@item()?['exposureLevel']"
                                                            }
                                                        ],
                                                        "format": "HTML",
                                                        "from": "@body('MDE_-_Get_Machines_by_Id')?['value']"
                                                    }
                                                },
                                                "Create_table_to_check_UserHighestExposureLevel": {
                                                    "runAfter": {
                                                        "Create_table_to_check_UserHighestRiskScore": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Table",
                                                    "inputs": {
                                                        "columns": [
                                                            {
                                                                "header": "",
                                                                "value": "@item()?['exposureLevel']"
                                                            }
                                                        ],
                                                        "format": "CSV",
                                                        "from": "@body('MDE_-_Get_Machines_by_Id')?['value']"
                                                    }
                                                },
                                                "Create_table_to_check_UserHighestRiskScore": {
                                                    "runAfter": {
                                                        "MDE_-_Get_Machines_by_Id": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Table",
                                                    "inputs": {
                                                        "columns": [
                                                            {
                                                                "header": "",
                                                                "value": "@item()?['riskScore']"
                                                            }
                                                        ],
                                                        "format": "CSV",
                                                        "from": "@body('MDE_-_Get_Machines_by_Id')?['value']"
                                                    }
                                                },
                                                "MDE_-_Get_Machines_by_Id": {
                                                    "runAfter": {
                                                        "Compose_UserHighestScore": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "https://@{parameters('MDEApiEndpoint')}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "method": "GET",
                                                        "queries": {
                                                            "$filter": "id in (\"@{join(item()?['ListIds'],'\",\"')}\")",
                                                            "$select": "id,computerDnsName,riskScore,exposureLevel"
                                                        },
                                                        "uri": "https://@{parameters('MDEApiEndpoint')}/api/machines"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "MDE_-_Get_Devices_by_SID": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "MDE_-_Get_Devices_by_SID": {
                                            "runAfter": {
                                                "Compose_MDE_Account_Query": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "https://@{parameters('MDEApiEndpoint')}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "Query": "@{outputs('Compose_MDE_Account_Query')}"
                                                },
                                                "method": "POST",
                                                "uri": "https://@{parameters('MDEApiEndpoint')}/api/advancedqueries/run"
                                            }
                                        },
                                        "Select_-_objectSid": {
                                            "runAfter": {
                                                "Filter_array_-_Get_only_account_with_a_onPremisesSecurityIdentifier_or_sid": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Select",
                                            "inputs": {
                                                "from": "@body('Filter_array_-_Get_only_account_with_a_onPremisesSecurityIdentifier_or_sid')",
                                                "select": {
                                                    "id": "@item()?['id']",
                                                    "objectSid": "@coalesce(item()?['onPremisesSecurityIdentifier'],item()?['RawEntity']?['sid'])",
                                                    "userPrincipalName": "@item()?['userPrincipalName']"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@body('Parse_JSON')?['AccountsCount']",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Create_table_to_check_UsersHighestExposureLevel": {
                                    "runAfter": {
                                        "Create_table_to_check_UsersHighestRiskScore": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "columns": [
                                            {
                                                "header": "",
                                                "value": "@item()['UserHighestExposureLevel']"
                                            }
                                        ],
                                        "format": "CSV",
                                        "from": "@variables('DetailedResultsAccounts')"
                                    }
                                },
                                "Create_table_to_check_UsersHighestRiskScore": {
                                    "runAfter": {
                                        "Check_for_Accounts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "columns": [
                                            {
                                                "header": "",
                                                "value": "@item()?['UserHighestRiskScore']"
                                            }
                                        ],
                                        "format": "CSV",
                                        "from": "@variables('DetailedResultsAccounts')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_-_Terminate_if_no_supported_entities": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Scope_Host": {
                            "actions": {
                                "Check_for_Hosts": {
                                    "actions": {
                                        "For_each_host": {
                                            "foreach": "@body('Parse_JSON')?['Hosts']",
                                            "actions": {
                                                "For_each_machine": {
                                                    "foreach": "@body('Get_Device_by_Host')?['value']",
                                                    "actions": {
                                                        "Append_to_array_variable_DetailedResultsHosts": {
                                                            "runAfter": {},
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "DetailedResultsHosts",
                                                                "value": "@items('For_each_machine')"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Get_Device_by_Host": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach"
                                                },
                                                "Get_Device_by_Host": {
                                                    "runAfter": {},
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "https://@{parameters('MDEApiEndpoint')}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "method": "GET",
                                                        "queries": {
                                                            "$filter": "id eq '@{coalesce(item()['RawEntity']?['additionalData']?['MdatpDeviceId'],'unknown')}' or  computerDnsName eq '@{coalesce(concat(item()['RawEntity']?['hostName'],'.',item()['RawEntity']?['dnsDomain']),item()['FQDN'])}'",
                                                            "$select": "id,computerDnsName,riskScore,exposureLevel"
                                                        },
                                                        "uri": "https://@{parameters('MDEApiEndpoint')}/api/machines"
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@body('Parse_JSON')?['HostsCount']",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Create_table_to_check_HostsHighestExposureLevel": {
                                    "runAfter": {
                                        "Create_table_to_check_HostsHighestRiskScore": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "columns": [
                                            {
                                                "header": "",
                                                "value": "@item()['exposureLevel']"
                                            }
                                        ],
                                        "format": "CSV",
                                        "from": "@variables('DetailedResultsHosts')"
                                    }
                                },
                                "Create_table_to_check_HostsHighestRiskScore": {
                                    "runAfter": {
                                        "Check_for_Hosts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "columns": [
                                            {
                                                "header": "",
                                                "value": "@item()['riskScore']"
                                            }
                                        ],
                                        "format": "CSV",
                                        "from": "@variables('DetailedResultsHosts')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_-_Terminate_if_no_supported_entities": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Scope_IP": {
                            "actions": {
                                "Check_for_IPs": {
                                    "actions": {
                                        "Compose_-_IP_Query": {
                                            "runAfter": {
                                                "Select_-_IP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "let ipData = print ipData = todynamic(url_decode(\"@{encodeUriComponent(body('Select_-_IP'))}\"));\nlet ipAddresses = ipData\n| mv-expand ipData\n| project Address = tostring(ipData.Address);\nDeviceNetworkInfo\n| where Timestamp > ago(@{triggerBody()?['LookbackInDays']}d)\n| summarize arg_max(Timestamp,*) by DeviceId\n| extend IPs = todynamic(IPAddresses)\n| mv-expand IPs\n| evaluate bag_unpack(IPs)\n| join kind=inner (ipAddresses) on $left.IPAddress == $right.Address\n| summarize ListIds=make_set(DeviceId) by IPAddress"
                                        },
                                        "For_each_IP_in_Results": {
                                            "foreach": "@body('HTTP_-_Get_DeviceId_by_IP')?['Results']",
                                            "actions": {
                                                "Append_to_array_variable_DetailedResultsIPs": {
                                                    "runAfter": {
                                                        "Create_table_to_check_IPHighestExposureLevel": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "DetailedResultsIPs",
                                                        "value": {
                                                            "Address": "@{item()['IPAddress']}",
                                                            "IPDevices": "@body('Get_Machines_by_Id')?['value']",
                                                            "IPHighestExposureLevel": "@{if(contains(body('Create_table_to_check_IPHighestExposureLevel'), 'High'), 'High', if(contains(body('Create_table_to_check_IPHighestExposureLevel'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_IPHighestExposureLevel'), 'Low'), 'Low', if(contains(body('Create_table_to_check_IPHighestExposureLevel'), 'None'), 'None', 'Unknown'))))}",
                                                            "IPHighestRiskScore": "@{if(contains(body('Create_table_to_check_IpHighestRiskScore'), 'High'), 'High', if(contains(body('Create_table_to_check_IpHighestRiskScore'), 'Medium'), 'Medium', if(contains(body('Create_table_to_check_IpHighestRiskScore'), 'Low'), 'Low', if(contains(body('Create_table_to_check_IpHighestRiskScore'), 'Informational'), 'Informational', if(contains(body('Create_table_to_check_IpHighestRiskScore'), 'None'), 'None', 'Unknown')))))}"
                                                        }
                                                    }
                                                },
                                                "Create_table_to_check_IPHighestExposureLevel": {
                                                    "runAfter": {
                                                        "Create_table_to_check_IPHighestRiskScore": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Table",
                                                    "inputs": {
                                                        "columns": [
                                                            {
                                                                "header": "",
                                                                "value": "@item()['exposureLevel']"
                                                            }
                                                        ],
                                                        "format": "CSV",
                                                        "from": "@body('Get_Machines_by_Id')?['value']"
                                                    }
                                                },
                                                "Create_table_to_check_IPHighestRiskScore": {
                                                    "runAfter": {
                                                        "Get_Machines_by_Id": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Table",
                                                    "inputs": {
                                                        "columns": [
                                                            {
                                                                "header": "",
                                                                "value": "@item()?['riskScore']"
                                                            }
                                                        ],
                                                        "format": "CSV",
                                                        "from": "@body('Get_Machines_by_Id')?['value']"
                                                    }
                                                },
                                                "Get_Machines_by_Id": {
                                                    "runAfter": {},
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "https://@{parameters('MDEApiEndpoint')}",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "method": "GET",
                                                        "queries": {
                                                            "$filter": "id in (\"@{join(item()?['ListIds'],'\",\"')}\")",
                                                            "$select": "id,computerDnsName,riskScore,exposureLevel"
                                                        },
                                                        "uri": "https://@{parameters('MDEApiEndpoint')}/api/machines"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "HTTP_-_Get_DeviceId_by_IP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "HTTP_-_Get_DeviceId_by_IP": {
                                            "runAfter": {
                                                "Compose_-_IP_Query": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "https://@{parameters('MDEApiEndpoint')}",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "body": {
                                                    "Query": "@{outputs('Compose_-_IP_Query')}"
                                                },
                                                "method": "POST",
                                                "uri": "https://@{parameters('MDEApiEndpoint')}/api/advancedqueries/run"
                                            }
                                        },
                                        "Select_-_IP": {
                                            "runAfter": {},
                                            "type": "Select",
                                            "inputs": {
                                                "from": "@body('Parse_JSON')?['IPs']",
                                                "select": {
                                                    "Address": "@item()?['Address']"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@body('Parse_JSON')?['IPsCount']",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Create_table_to_check_IPsHighestExposureLevel": {
                                    "runAfter": {
                                        "Create_table_to_check_IPsHighestRiskScore": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "columns": [
                                            {
                                                "header": "",
                                                "value": "@item()['IPHighestExposureLevel']"
                                            }
                                        ],
                                        "format": "CSV",
                                        "from": "@variables('DetailedResultsIPs')"
                                    }
                                },
                                "Create_table_to_check_IPsHighestRiskScore": {
                                    "runAfter": {
                                        "Check_for_IPs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "columns": [
                                            {
                                                "header": "",
                                                "value": "@item()['IPHighestRiskScore']"
                                            }
                                        ],
                                        "format": "CSV",
                                        "from": "@variables('DetailedResultsIPs')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_-_Terminate_if_no_supported_entities": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Terminate_Account_error": {
                            "runAfter": {
                                "Response_error_Account": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runError": {
                                    "code": "@{result('For_each_account')[0]['outputs'][0]['outputs']['statusCode']}",
                                    "message": "@{result('For_each_account')[0]['outputs'][0]['outputs']['body']}"
                                },
                                "runStatus": "Failed"
                            }
                        },
                        "Terminate_Host_error": {
                            "runAfter": {
                                "Response_error_Host": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runError": {
                                    "code": "@{result('For_each_host')[0]['outputs'][0]['outputs']['statusCode']}",
                                    "message": "@{result('For_each_host')[0]['outputs'][0]['outputs']['body']}"
                                },
                                "runStatus": "Failed"
                            }
                        },
                        "Terminate_IP_error": {
                            "runAfter": {
                                "Response_error_IP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runError": {
                                    "code": "@{result('For_each_IP_in_Results')[0]['outputs'][0]['outputs']['statusCode']}",
                                    "message": "@{result('For_each_IP_in_Results')[0]['outputs'][0]['outputs']['body']}"
                                },
                                "runStatus": "Failed"
                            }
                        }
                    },
                    "contentVersion": "1.0.0.0",
                    "outputs": {},
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "MDEApiEndpoint": {
                            "defaultValue": "[parameters('MDEApiEndpoint')]",
                            "type": "String"
                        },
                        "PlaybookInternalName": {
                            "defaultValue": "MDEModule",
                            "type": "String"
                        },
                        "PlaybookVersion": {
                            "defaultValue": "0.2.1",
                            "type": "String"
                        },
                        "ProjectName": {
                            "defaultValue": "STAT",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "triage": {
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "AddIncidentComments": {
                                            "title": "Add comments to the incident",
                                            "type": "boolean"
                                        },
                                        "Entities": {
                                            "description": "Click here and select the EnrichedEntities object from the Dynamic content menu",
                                            "title": "Enriched Entities",
                                            "type": "array"
                                        },
                                        "LookbackInDays": {
                                            "description": "Enter a value between 1 and 30",
                                            "maximum": 30,
                                            "minimum": 1,
                                            "title": "Lookback period in days",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "kind": "Http",
                            "type": "Request"
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                            }
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "resourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Logic/workflows', parameters('PlaybookName'))]"
        }
    }
}
